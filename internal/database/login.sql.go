// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: login.sql

package database

import (
	"context"
	"time"
	"database/sql"

	"github.com/google/uuid"
)

const findRefreshToken = `-- name: FindRefreshToken :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) FindRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, findRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const findUserByRefreshToken = `-- name: FindUserByRefreshToken :one
SELECT id, created_at, updated_at, email, hashed_password FROM users
WHERE id = (
    SELECT user_id FROM refresh_tokens
    WHERE token = $1 AND expires_at > $2 AND revoked_at IS NULL
)
`

type FindUserByRefreshTokenParams struct {
	Token     	string
	CurrentTime time.Time
}

func (q *Queries) FindUserByRefreshToken(ctx context.Context, arg FindUserByRefreshTokenParams) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByRefreshToken, arg.Token, arg.CurrentTime)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const generateRefreshToken = `-- name: GenerateRefreshToken :one
INSERT INTO refresh_tokens(token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    NULL
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type GenerateRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) GenerateRefreshToken(ctx context.Context, arg GenerateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, generateRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :one
UPDATE refresh_tokens
SET revoked_at = NOW(), updated_at = NOW()
WHERE token = $1 AND revoked_at IS NULL
RETURNING token, revoked_at
`

type RevokeRefreshTokenRow struct {
	Token     string
	RevokedAt sql.NullTime
}

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) (RevokeRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, revokeRefreshToken, token)
	var i RevokeRefreshTokenRow
	err := row.Scan(&i.Token, &i.RevokedAt)
	return i, err
}

